
	import Vue from 'vue';
	import { Component, Prop } from 'vue-property-decorator';
	import { ParamValue } from '@/common/ParamValue';
	import { tryToTranslate } from '@/i18n';

	@Component
	export default class TextField extends Vue {
		@Prop() public param: ParamValue;
		@Prop() public locked: boolean;
		@Prop() public textArea: boolean;
		@Prop() public rules: any;
		@Prop({default: false}) public hideDetails: boolean;

		private enteredValue: string = undefined;
		private value: string | null = null;
		private fieldRules: any = [true];
		private valid: boolean = true;

		get description() {
			const pdef = this.param?.definition;
			return pdef && (tryToTranslate(pdef.Name) || pdef.Description) || 'No title';
		}

		get readOnly() {
			return !this.param || this.param.definition?.ReadOnly || this.locked || false;
		}

		get messages() {
			return (this.warnings || this.errors) && (this.warnings || []).concat(this.errors || []);
		}

		get errorClass() {
			if ((this.errors || []).length > 0)
				return 'error';
			if ((this.warnings || []).length > 0)
				return 'warning';
			return '';
		}

		get errors() {
			const e = this.param?.errors;
			return e?.length && e.map(x => x.Message) || null;
		}

		get warnings() {
			const e = this.param?.warnings;
			return e?.length && e.map(x => x.Message) || null;
		}

		public mounted() {
			if (!this.param)
				return;
			if (this.rules)
				this.fieldRules = [this.rules];

			this.value = this.param.getValue();

			if (this.param?.definition?.ReadOnly)
				this.$watch('backingValue', (x: any) => this.value = x);
		}

		public valueChange() {
			if (!this.valid && this.rules != null)
				return;
			const _value = this.value as string;
			this.enteredValue = _value;
			if (!this.readOnly)
				this.param.setValue(this.enteredValue);
		}

		private get backingValue() {
			return this.param?.getValue();
		}
	}
