import { ref, computed, watch, onMounted } from 'vue'
import { ParamValue } from '@/common/ParamValue';
import { tryToTranslate } from '@/i18n';

// Props
const props = defineProps<{
	param: ParamValue;
	locked: boolean;
	textArea: boolean;
	rules: any;
	hideDetails: boolean;
}>();

// State
const enteredValue = ref<string>(undefined);
const value = ref<string | null>(null);
const fieldRules = ref<any>([true]);
const valid = ref<boolean>(true);

// Computeds
const description = computed(() => {
	const pdef = props.param?.definition;
	return pdef && (tryToTranslate(pdef.Name) || pdef.Description) || 'No title';
});

const readOnly = computed(() => !props.param || props.param.definition?.ReadOnly || props.locked || false);

const messages = computed(() => (warnings.value || errors.value) && (warnings.value || []).concat(errors.value || []));

const errorClass = computed(() => {
	if ((errors.value || []).length > 0)
		return 'error';
	if ((warnings.value || []).length > 0)
		return 'warning';
	return '';
});

const errors = computed(() => {
	const e = props.param?.errors;
	return e?.length && e.map(x => x.Message) || null;
});

const warnings = computed(() => {
	const e = props.param?.warnings;
	return e?.length && e.map(x => x.Message) || null;
});

const backingValue = computed(() => props.param?.getValue());

// Initialization
onMounted(() => {
	if (!props.param)
		return;
	if (props.rules)
		fieldRules.value = [props.rules];

	value.value = props.param.getValue();

	if (props.param?.definition?.ReadOnly)
		watch(() => backingValue.value, (x: any) => value.value = x);
});

// Functions
function valueChange() {
	if (!valid.value && props.rules != null)
		return;
	const _value = value.value as string;
	enteredValue.value = _value;
	if (!readOnly.value)
		props.param.setValue(enteredValue.value);
}

