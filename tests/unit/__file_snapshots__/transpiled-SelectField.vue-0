import { ref, computed, watch, onMounted } from 'vue'
import { ParamValue } from '@/common/ParamValue';
import { MessageSeverity, ValidationResult } from 'types/dto/CalcServiceDomain';
import UnitValue from '@/common/UnitValue';
import CommentIcon from '@/components/CommentIcon.vue';
import SimpleWarnings from '@/components/SimpleWarnings.vue';
import { tryToTranslate } from '@/i18n';
import colors from '@/sass/_variables.scss';

interface SelectValue {
text: string;
value: string;
}

// Props
const props = defineProps<{
	param: ParamValue;
	locked: boolean;
	readwrite: boolean;
	items: SelectValue[];
	itemText: string;
	itemKey: string;
	onChange: (newValue: any) => void;
	dropdown: boolean | string;
	default: string;
	target: string;
}>();

// State
const values = ref<SelectValue[]>([]);
const selected = ref<SelectValue>(null);
const internalErrors = ref<string[]>([]);
const showCommentIcon = ref<boolean>(false);

// Computeds
const description = computed(() => {
	const pdef = props.param?.definition;
	if (pdef.Type === 'Object') {
		const desc = tryToTranslate(pdef.Name + '.Description');
		if (desc)
			return desc;
	}
	const descr = pdef && (tryToTranslate(pdef.Name) || pdef.Description);
	return [ descr || 'No title', unit && `(${unit})` ].join(' ').trim();
});

const unit = computed(() => {
	const u = props.param?.definition?.Unit;
	// Don't add stuff that looks like enum value as unit
	if (!u || u === 'string' || u.length > 6)
		return;
	return u[0].toUpperCase() + u.slice(1);
});

const readOnly = computed(() => {
	return !props.param || props.param.definition?.ReadOnly || props.locked;
});

const msgs = computed(() => {
	const internals = (internalErrors.value || []).map(e => ({
		Severity: MessageSeverity.Error,
		Message: e,
		ParamName: props.param.valueName
	} as ValidationResult));
	return (props.param?.allMessages || []).concat(internals);
});

const messages = computed(() => {
	// Show warning if manual items are set but nothing is selectable
	if (props.items !== undefined && (!props.items || !props.items.length))
		return 'No options are available';
});

const commentField = computed((): string {
	return props.param?.valueName;
});

const backingValue = computed(() => {
	return props.param?.getValue();
});

// Watches
watch(() => items.value, (items: any) => {
	setValues(items);
});

// Initialization
onMounted(() => {
	setValues(props.items || props.param?.definition?.Values || []);

	// Value is only updated from backend if explicitly specified or if it is read-only,
	// to avoid write -> update -> write infinite loops
	const readWrite = props.readwrite || (props.readwrite as any as string) === '';
	if (readWrite || props.param?.definition?.ReadOnly)
		watch(() => backingValue.value, (x: any) => {
			if (x == null)
				selected.value = null;
			else {
				const values = values.value || props.items || [];
				// tslint:disable-next-line: triple-equals
				const newSel = values.find(s => key(s) == x as any);
				if (newSel)
					selected.value = newSel;
			}
		});
});

// Functions
function isSelected(v: SelectValue) {
	return selected.value && key(v) === key(selected.value);
}

function color(v: SelectValue) {
	if (!isSelected(v))
		return;
	if (props.param?.errors?.length)
		return colors.error;
	if (props.param?.warnings?.length)
		return colors.warning;
}

function valueChange(v: SelectValue) {
	const value = value(v);
	if (value)
		internalErrors.value = [];
	if (props.onChange)
		props.onChange(value);
	else
		props.param.setValue(value);
}

function setValues(items: any) {
	// Attempt to translate string lists since they are probably enums
	if (items?.length && typeof(items[0]) === 'string')
		values.value = items.map((x: string) => ({ text: text(x), value: x }));
	else
		values.value = items;

	if (props.param) {
		const initialValue = props.param.getValue() || props.default || null;
		setValue(initialValue, true);
	}
}

function setValue(initialValue: any, autoSelectSingleItem: boolean = false) {
	let preselected: SelectValue;
	const initialKey = key(initialValue);

	if (initialKey != null) {
		// Try to find a matching value
		const values = values.value || props.items || [];
		preselected = values.find(x => key(x) === initialKey) || null;
	} else {
		// Single value; just select it
		if (autoSelectSingleItem && values.value?.length === 1) {
			preselected = values.value[0];
			const value = value(preselected);
			if (props.onChange)
				props.onChange(value);
			else
				props.param.setValue(value);
		}
	}

	if (preselected) {
		// Found preselected item
		selected.value = preselected;
		internalErrors.value = [];
	} else if (initialKey) {
		// The supplied value was not in the list
		const text = text(initialValue);
		internalErrors.value = ['Unknown option ' + (text === initialKey ? `"${text}"` : `"${text}" (${initialKey})`)];
	} else {
		// Nothing selected
		selected.value = null;
		internalErrors.value = [];
	}
}

function key(sel: any): string {
	if (!sel)
		return null;
	if (props.itemKey)
		return sel[props.itemKey];
	return value(sel).toString();
}

function text(sel: any): string {
	if (!sel)
		return null;

	const text: string = props.itemText && sel[props.itemText] || sel.text || key(sel);
	if (!text)
		return null;

	const def = props.param?.definition;
	return UnitValue.readableString(text, def?.Unit);
}

// Static functions
function value(sel: SelectValue | string): any {
	if (!sel)
		return null;
	if (typeof(sel) === 'string')
		 return sel;
	if (sel.value)
		return sel.value;
	return sel;
}

